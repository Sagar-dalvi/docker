 a simplified guide to the most commonly used Docker commands,
including explanations and examples for each command to help you understand their usage.

### **Basic Docker Commands**

1. **docker --version**
   - **Purpose**: Shows the version of Docker installed.
   - **Example**:
     ```bash
     docker --version
     ```
   - **Output**: `Docker version 20.10.7, build f0df350`

2. **docker pull [IMAGE]**
   - **Purpose**: Downloads an image from Docker Hub (or another registry) to your local machine.
   - **Example**:
     ```bash
     docker pull nginx
     ```
   - **Output**: Downloads the latest Nginx image.

3. **docker images** or **docker image ls**
   - **Purpose**: Lists all Docker images on your local machine.
   - **Example**:
     ```bash
     docker images
     ```
   - **Output**: Shows a list of images with their repository, tag, image ID, and size.

4. **docker rmi [IMAGE]**
   - **Purpose**: Removes an image from your local machine.
   - **Example**:
     ```bash
     docker rmi nginx
     ```
   - **Output**: Removes the Nginx image.

5. **docker run [OPTIONS] [IMAGE] [COMMAND]**
   - **Purpose**: Creates and starts a container from an image.
   - **Example**:
     ```bash
     docker run -d -p 8080:80 nginx
     ```
   - **Options**:
     - `-d`: Run the container in detached mode.
     - `-p 8080:80`: Map port 80 inside the container to port 8080 on your host.
   - **Output**: Starts an Nginx container.

6. **docker ps**
   - **Purpose**: Lists all running containers.
   - **Example**:
     ```bash
     docker ps
     ```
   - **Output**: Shows a list of running containers with their ID, image, command, and status.

7. **docker ps -a**
   - **Purpose**: Lists all containers, including those that are stopped.
   - **Example**:
     ```bash
     docker ps -a
     ```
   - **Output**: Shows all containers, including their status (running, exited, etc.).

8. **docker stop [CONTAINER]**
   - **Purpose**: Stops a running container.
   - **Example**:
     ```bash
     docker stop my_container
     ```
   - **Output**: Stops the container named `my_container`.

9. **docker start [CONTAINER]**
   - **Purpose**: Starts a stopped container.
   - **Example**:
     ```bash
     docker start my_container
     ```
   - **Output**: Starts the container named `my_container`.

10. **docker rm [CONTAINER]**
    - **Purpose**: Removes a stopped container from your local machine.
    - **Example**:
      ```bash
      docker rm my_container
      ```
    - **Output**: Removes the container named `my_container`.

11. **docker exec -it [CONTAINER] [COMMAND]**
    - **Purpose**: Runs a command inside a running container.
    - **Example**:
      ```bash
      docker exec -it my_container /bin/bash
      ```
    - **Options**:
      - `-it`: Interactive terminal.
      - `/bin/bash`: Opens a bash shell inside the container.
    - **Output**: Gives you a command line inside the container.

12. **docker logs [CONTAINER]**
    - **Purpose**: Shows the logs from a container.
    - **Example**:
      ```bash
      docker logs my_container
      ```
    - **Output**: Displays the logs generated by `my_container`.

13. **docker build -t [TAG] [DIRECTORY]**
    - **Purpose**: Builds a Docker image from a Dockerfile in a specified directory.
    - **Example**:
      ```bash
      docker build -t my_image .
      ```
    - **Options**:
      - `-t my_image`: Tags the image with the name `my_image`.
      - `.`: The current directory contains the Dockerfile.
    - **Output**: Builds an image named `my_image`.

14. **docker tag [SOURCE_IMAGE] [TARGET_IMAGE]**
    - **Purpose**: Tags an existing image with a new name or version.
    - **Example**:
      ```bash
      docker tag my_image my_image:v1
      ```
    - **Output**: Tags `my_image` with the version `v1`.

15. **docker push [IMAGE]**
    - **Purpose**: Uploads a local image to a Docker registry (like Docker Hub).
    - **Example**:
      ```bash
      docker push my_image
      ```
    - **Output**: Pushes the `my_image` to the Docker registry.

16. **docker network ls**
    - **Purpose**: Lists all Docker networks.
    - **Example**:
      ```bash
      docker network ls
      ```
    - **Output**: Shows all Docker networks with their IDs, names, and drivers.

17. **docker volume ls**
    - **Purpose**: Lists all Docker volumes.
    - **Example**:
      ```bash
      docker volume ls
      ```
    - **Output**: Shows all Docker volumes with their names and driver.

18. **docker-compose up**
    - **Purpose**: Starts containers defined in a `docker-compose.yml` file.
    - **Example**:
      ```bash
      docker-compose up
      ```
    - **Output**: Starts the services defined in your Docker Compose file.

19. **docker-compose down**
    - **Purpose**: Stops and removes containers defined in a `docker-compose.yml` file.
    - **Example**:
      ```bash
      docker-compose down
      ```
    - **Output**: Stops and removes the containers, networks, and volumes defined in your Docker Compose file.

### Summary

- **`docker --version`**: Check Docker version.
- **`docker pull [IMAGE]`**: Download an image.
- **`docker images`**: List local images.
- **`docker rmi [IMAGE]`**: Remove an image.
- **`docker run [OPTIONS] [IMAGE] [COMMAND]`**: Create and start a container.
- **`docker ps`**: List running containers.
- **`docker ps -a`**: List all containers.
- **`docker stop [CONTAINER]`**: Stop a running container.
- **`docker start [CONTAINER]`**: Start a stopped container.
- **`docker rm [CONTAINER]`**: Remove a stopped container.
- **`docker exec -it [CONTAINER] [COMMAND]`**: Run a command inside a container.
- **`docker logs [CONTAINER]`**: Show container logs.
- **`docker build -t [TAG] [DIRECTORY]`**: Build an image from a Dockerfile.
- **`docker tag [SOURCE_IMAGE] [TARGET_IMAGE]`**: Tag an image.
- **`docker push [IMAGE]`**: Upload an image to a registry.
- **`docker network ls`**: List Docker networks.
- **`docker volume ls`**: List Docker volumes.
- **`docker-compose up`**: Start services with Docker Compose.
- **`docker-compose down`**: Stop and remove services with Docker Compose.

By familiarizing yourself with these commands,
youâ€™ll be able to manage Docker images and containers effectively.
